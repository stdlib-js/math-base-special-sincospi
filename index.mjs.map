{"version":3,"file":"index.mjs","sources":["../lib/sincospi.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan' ;\nimport isInfinite from '@stdlib/math-base-assert-is-infinite' ;\nimport abs from '@stdlib/math-base-special-abs' ;\nimport sincos from '@stdlib/math-base-special-sincos' ;\nimport floor from '@stdlib/math-base-special-floor' ;\nimport PI from '@stdlib/constants-float64-pi' ;\nimport copysign from '@stdlib/math-base-special-copysign' ;\n\n\n// MAIN //\n\n/**\n* Simultaneously computes the sine and cosine of a number times π.\n*\n* @private\n* @param {(Array|TypedArray|Object)} out - destination array\n* @param {number} x - input value\n* @returns {(Array|TypedArray|Object)} two-element array containing sin(πx) and cos(πx)\n*\n* @example\n* var v = sincospi( [ 0.0, 0.0 ], 0.0 );\n* // returns [ 0.0, 1.0 ]\n*\n* @example\n* var v = sincospi( [ 0.0, 0.0 ], 0.5 );\n* // returns [ 1.0, 0.0 ]\n*\n* @example\n* var v = sincospi( [ 0.0, 0.0 ], 0.1 );\n* // returns [ ~0.309, ~0.951 ]\n*\n* @example\n* var v = sincospi( [ 0.0, 0.0 ], NaN );\n* // returns [ NaN, NaN ]\n*/\nfunction sincospi( out, x ) {\n\tvar tmp;\n\tvar ix;\n\tvar ar;\n\tvar r;\n\n\tif ( isnan( x ) || isInfinite( x ) ) {\n\t\tout[ 0 ] = NaN;\n\t\tout[ 1 ] = NaN;\n\t\treturn out;\n\t}\n\tr = x % 2.0;\n\tar = abs( r );\n\tif ( ar === 0.0 || ar === 1.0 ) {\n\t\tix = floor( ar );\n\t\tout[ 0 ] = copysign( 0.0, r );\n\t\tout[ 1 ] = ( ix%2 === 1 ) ? -1.0 : 1.0;\n\t\treturn out;\n\t}\n\tif ( ar < 0.25 ) {\n\t\treturn sincos( out, PI*r );\n\t}\n\tif ( ar < 0.75 ) {\n\t\tar = 0.5 - ar;\n\t\tsincos( out, PI*ar );\n\t\ttmp = out[ 0 ];\n\t\tout[ 0 ] = copysign( out[ 1 ], r );\n\t\tout[ 1 ] = tmp;\n\t\treturn out;\n\t}\n\tif ( ar < 1.25 ) {\n\t\tr = copysign( 1.0, r ) - r;\n\t\tsincos( out, PI*r );\n\t\tout[ 1 ] *= -1;\n\t\treturn out;\n\t}\n\tif ( ar < 1.75 ) {\n\t\tar -= 1.5;\n\t\tsincos( out, PI*ar );\n\t\ttmp = out[ 0 ];\n\t\tout[ 0 ] = -copysign( out[ 1 ], r );\n\t\tout[ 1 ] = tmp;\n\t\treturn out;\n\t}\n\tr -= copysign( 2.0, r );\n\treturn sincos( out, PI*r );\n}\n\n\n// EXPORTS //\n\nexport default sincospi;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport compute from './sincospi.js' ;\n\n\n// MAIN //\n\n/**\n* Simultaneously computes the sine and cosine of a number times π.\n*\n* @param {(Array|TypedArray|Object)} [out] - destination array\n* @param {number} x - input value\n* @returns {(Array|TypedArray|Object)} two-element array containing sin(πx) and cos(πx)\n*\n* @example\n* var v = sincospi( 0.0 );\n* // returns [ 0.0, 1.0 ]\n*\n* @example\n* var v = sincospi( 0.5 );\n* // returns [ 1.0, 0.0 ]\n*\n* @example\n* var v = sincospi( 0.1 );\n* // returns [ ~0.309, ~0.951 ]\n*\n* @example\n* var v = sincospi( NaN );\n* // returns [ NaN, NaN ]\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n*\n* var out = new Float64Array( 2 );\n*\n* var v = sincospi( out, 0.0 );\n* // returns <Float64Array>[ 0.0, 1.0 ]\n*\n* var bool = ( v === out );\n* // returns true\n*/\nfunction sincospi( out, x ) {\n\tif ( arguments.length === 1 ) {\n\t\treturn compute( [ 0.0, 0.0 ], out );\n\t}\n\treturn compute( out, x );\n}\n\n\n// EXPORTS //\n\nexport default sincospi;\n"],"names":["sincospi","out","x","tmp","ix","ar","r","isnan","isInfinite","NaN","abs","floor","copysign","sincos","PI","arguments","length","compute"],"mappings":";;ioBAyDA,SAASA,EAAUC,EAAKC,GACvB,IAAIC,EACAC,EACAC,EACAC,EAEJ,OAAKC,EAAOL,IAAOM,EAAYN,IAC9BD,EAAK,GAAMQ,IACXR,EAAK,GAAMQ,IACJR,GAII,KADZI,EAAKK,EADLJ,EAAIJ,EAAI,KAEkB,IAAPG,GAClBD,EAAKO,EAAON,GACZJ,EAAK,GAAMW,EAAU,EAAKN,GAC1BL,EAAK,GAAQG,EAAG,GAAM,GAAO,EAAM,EAC5BH,GAEHI,EAAK,IACFQ,EAAQZ,EAAKa,EAAGR,GAEnBD,EAAK,KAETQ,EAAQZ,EAAKa,GADbT,EAAK,GAAMA,IAEXF,EAAMF,EAAK,GACXA,EAAK,GAAMW,EAAUX,EAAK,GAAKK,GAC/BL,EAAK,GAAME,EACJF,GAEHI,EAAK,MACTC,EAAIM,EAAU,EAAKN,GAAMA,EACzBO,EAAQZ,EAAKa,EAAGR,GAChBL,EAAK,KAAQ,EACNA,GAEHI,EAAK,MAETQ,EAAQZ,EAAKa,GADbT,GAAM,MAENF,EAAMF,EAAK,GACXA,EAAK,IAAOW,EAAUX,EAAK,GAAKK,GAChCL,EAAK,GAAME,EACJF,IAERK,GAAKM,EAAU,EAAKN,GACbO,EAAQZ,EAAKa,EAAGR,GACxB,CC1CA,SAASN,EAAUC,EAAKC,GACvB,OAA0B,IAArBa,UAAUC,OACPC,EAAS,CAAE,EAAK,GAAOhB,GAExBgB,EAAShB,EAAKC,EACtB"}