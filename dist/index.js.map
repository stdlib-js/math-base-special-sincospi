{
  "version": 3,
  "sources": ["../lib/assign.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar isInfinite = require( '@stdlib/math-base-assert-is-infinite' );\nvar abs = require( '@stdlib/math-base-special-abs' );\nvar sincos = require( '@stdlib/math-base-special-sincos' ).assign;\nvar floor = require( '@stdlib/math-base-special-floor' );\nvar PI = require( '@stdlib/constants-float64-pi' );\nvar copysign = require( '@stdlib/math-base-special-copysign' );\n\n\n// MAIN //\n\n/**\n* Simultaneously computes the sine and cosine of a number times \u03C0.\n*\n* @private\n* @param {number} x - input value\n* @param {Collection} out - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array index offset\n* @returns {Collection} two-element array containing sin(\u03C0x) and cos(\u03C0x)\n*\n* @example\n* var v = sincospi( 0.0, [0.0, 0.0], 1, 0 );\n* // returns [ 0.0, 1.0 ]\n*\n* @example\n* var v = sincospi( 0.5, [0.0, 0.0], 1, 0 );\n* // returns [ 1.0, 0.0 ]\n*\n* @example\n* var v = sincospi( 0.1, [0.0, 0.0], 1, 0 );\n* // returns [ ~0.309, ~0.951 ]\n*\n* @example\n* var v = sincospi( NaN, [0.0, 0.0], 1, 0 );\n* // returns [ NaN, NaN ]\n*/\nfunction sincospi( x, out, stride, offset ) {\n\tvar tmp;\n\tvar ix;\n\tvar ar;\n\tvar r;\n\n\tif ( isnan( x ) || isInfinite( x ) ) {\n\t\tout[ offset ] = NaN;\n\t\tout[ offset+stride ] = NaN;\n\t\treturn out;\n\t}\n\tr = x % 2.0;\n\tar = abs( r );\n\tif ( ar === 0.0 || ar === 1.0 ) {\n\t\tix = floor( ar );\n\t\tout[ offset ] = copysign( 0.0, r );\n\t\tout[ offset+stride ] = ( ix%2 === 1 ) ? -1.0 : 1.0;\n\t\treturn out;\n\t}\n\tif ( ar < 0.25 ) {\n\t\treturn sincos( PI*r, out, stride, offset );\n\t}\n\tif ( ar < 0.75 ) {\n\t\tar = 0.5 - ar;\n\t\tsincos( PI*ar, out, stride, offset );\n\t\ttmp = out[ offset ];\n\t\tout[ offset ] = copysign( out[ offset+stride ], r );\n\t\tout[ offset+stride ] = tmp;\n\t\treturn out;\n\t}\n\tif ( ar < 1.25 ) {\n\t\tr = copysign( 1.0, r ) - r;\n\t\tsincos( PI*r, out, stride, offset );\n\t\tout[ offset+stride ] *= -1;\n\t\treturn out;\n\t}\n\tif ( ar < 1.75 ) {\n\t\tar -= 1.5;\n\t\tsincos( PI*ar, out, stride, offset );\n\t\ttmp = out[ offset ];\n\t\tout[ offset ] = -copysign( out[ offset+stride ], r );\n\t\tout[ offset+stride ] = tmp;\n\t\treturn out;\n\t}\n\tr -= copysign( 2.0, r );\n\treturn sincos( PI*r, out, stride, offset );\n}\n\n\n// EXPORTS //\n\nmodule.exports = sincospi;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar assign = require( './assign.js' );\n\n\n// MAIN //\n\n/**\n* Simultaneously computes the sine and cosine of a number times \u03C0.\n*\n* @param {number} x - input value\n* @returns {Array<number>} two-element array containing sin(\u03C0x) and cos(\u03C0x)\n*\n* @example\n* var v = sincospi( 0.0 );\n* // returns [ 0.0, 1.0 ]\n*\n* @example\n* var v = sincospi( 0.5 );\n* // returns [ 1.0, 0.0 ]\n*\n* @example\n* var v = sincospi( 0.1 );\n* // returns [ ~0.309, ~0.951 ]\n*\n* @example\n* var v = sincospi( NaN );\n* // returns [ NaN, NaN ]\n*/\nfunction sincospi( x ) {\n\treturn assign( x, [ 0.0, 0.0 ], 1, 0 );\n}\n\n\n// EXPORTS //\n\nmodule.exports = sincospi;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Simultaneously compute the sine and cosine of a number times \u03C0.\n*\n* @module @stdlib/math-base-special-sincospi\n*\n* @example\n* var sincospi = require( '@stdlib/math-base-special-sincospi' );\n*\n* var v = sincospi( 0.0 );\n* // returns [ 0.0, 1.0 ]\n*\n* v = sincospi( 0.5 );\n* // returns [ 1.0, 0.0 ]\n*\n* v = sincospi( 0.1 );\n* // returns [ ~0.309, ~0.951 ]\n*\n* v = sincospi( NaN );\n* // returns [ NaN, NaN ]\n*\n* @example\n* var sincospi = require( '@stdlib/math-base-special-sincospi' );\n*\n* var out = new Float64Array( 2 );\n*\n* var v = sincospi.assign( 0.0, out, 1, 0 );\n* // returns <Float64Array>[ 0.0, 1.0 ]\n*\n* var bool = ( v === out );\n* // returns true\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar assign = require( './assign.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAQ,QAAS,iCAAkC,EACnDC,EAAa,QAAS,sCAAuC,EAC7DC,EAAM,QAAS,+BAAgC,EAC/CC,EAAS,QAAS,kCAAmC,EAAE,OACvDC,EAAQ,QAAS,iCAAkC,EACnDC,EAAK,QAAS,8BAA+B,EAC7CC,EAAW,QAAS,oCAAqC,EA+B7D,SAASC,EAAUC,EAAGC,EAAKC,EAAQC,EAAS,CAC3C,IAAIC,EACAC,EACAC,EACAC,EAEJ,OAAKf,EAAOQ,CAAE,GAAKP,EAAYO,CAAE,GAChCC,EAAKE,CAAO,EAAI,IAChBF,EAAKE,EAAOD,CAAO,EAAI,IAChBD,IAERM,EAAIP,EAAI,EACRM,EAAKZ,EAAKa,CAAE,EACPD,IAAO,GAAOA,IAAO,GACzBD,EAAKT,EAAOU,CAAG,EACfL,EAAKE,CAAO,EAAIL,EAAU,EAAKS,CAAE,EACjCN,EAAKE,EAAOD,CAAO,EAAMG,EAAG,IAAM,EAAM,GAAO,EACxCJ,GAEHK,EAAK,IACFX,EAAQE,EAAGU,EAAGN,EAAKC,EAAQC,CAAO,EAErCG,EAAK,KACTA,EAAK,GAAMA,EACXX,EAAQE,EAAGS,EAAIL,EAAKC,EAAQC,CAAO,EACnCC,EAAMH,EAAKE,CAAO,EAClBF,EAAKE,CAAO,EAAIL,EAAUG,EAAKE,EAAOD,CAAO,EAAGK,CAAE,EAClDN,EAAKE,EAAOD,CAAO,EAAIE,EAChBH,GAEHK,EAAK,MACTC,EAAIT,EAAU,EAAKS,CAAE,EAAIA,EACzBZ,EAAQE,EAAGU,EAAGN,EAAKC,EAAQC,CAAO,EAClCF,EAAKE,EAAOD,CAAO,GAAK,GACjBD,GAEHK,EAAK,MACTA,GAAM,IACNX,EAAQE,EAAGS,EAAIL,EAAKC,EAAQC,CAAO,EACnCC,EAAMH,EAAKE,CAAO,EAClBF,EAAKE,CAAO,EAAI,CAACL,EAAUG,EAAKE,EAAOD,CAAO,EAAGK,CAAE,EACnDN,EAAKE,EAAOD,CAAO,EAAIE,EAChBH,IAERM,GAAKT,EAAU,EAAKS,CAAE,EACfZ,EAAQE,EAAGU,EAAGN,EAAKC,EAAQC,CAAO,GAC1C,CAKAZ,EAAO,QAAUQ,IC9GjB,IAAAS,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAS,IA2Bb,SAASC,EAAUC,EAAI,CACtB,OAAOF,EAAQE,EAAG,CAAE,EAAK,CAAI,EAAG,EAAG,CAAE,CACtC,CAKAH,EAAO,QAAUE,ICFjB,IAAIE,EAAc,QAAS,uDAAwD,EAC/EC,EAAO,IACPC,EAAS,IAKbF,EAAaC,EAAM,SAAUC,CAAO,EAKpC,OAAO,QAAUD",
  "names": ["require_assign", "__commonJSMin", "exports", "module", "isnan", "isInfinite", "abs", "sincos", "floor", "PI", "copysign", "sincospi", "x", "out", "stride", "offset", "tmp", "ix", "ar", "r", "require_main", "__commonJSMin", "exports", "module", "assign", "sincospi", "x", "setReadOnly", "main", "assign"]
}
